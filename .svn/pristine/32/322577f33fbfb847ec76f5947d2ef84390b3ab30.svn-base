{"version":3,"sources":["../../../src/@ionic-native/plugins/code-push/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AACxE,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AA0N7C;;GAEG;AACH,MAAM,CAAN,IAAY,UA+CX;AA/CD,WAAY,UAAA;IACV;;OAEG;IACH,uDAAU,CAAA;IAEV;;;OAGG;IACH,mEAAgB,CAAA;IAEhB;;OAEG;IACH,+DAAc,CAAA;IAEd;;;OAGG;IACH,6CAAK,CAAA;IAEL;;OAEG;IACH,yDAAW,CAAA;IAEX;;OAEG;IACH,yEAAmB,CAAA;IAEnB;;OAEG;IACH,2EAAoB,CAAA;IAEpB;;OAEG;IACH,yEAAmB,CAAA;IAEnB;;OAEG;IACH,qEAAiB,CAAA;AACnB,CAAC,EA/CW,UAAA,KAAA,UAAA,QA+CX;AAED;;GAEG;AACH,MAAM,CAAN,IAAY,WAeX;AAfD,WAAY,WAAA;IACV;;OAEG;IACH,uDAAS,CAAA;IAET;;OAEG;IACH,mEAAe,CAAA;IAEf;;OAEG;IACH,iEAAc,CAAA;AAChB,CAAC,EAfW,WAAA,KAAA,WAAA,QAeX;AA2GD;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AASH;IAA8B,4BAAiB;IAA/C;;IAqGA,CAAC;IAnGC;;;;;;OAMG;IAEH,oCAAiB,GAAjB;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAEH,oCAAiB,GAAjB;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;;;;;;;OASG;IAIH,iCAAc,GAAd,UAAe,aAAsB;QACnC,MAAM,CAAC;IACT,CAAC;IAED;;;;;;;;OAQG;IAEH,yCAAsB,GAAtB;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAEH,qCAAkB,GAAlB;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;;;;;;;;;;;;;;;;;;OAoBG;IAMH,uBAAI,GAAJ,UAAK,WAAyB,EAAE,gBAAoD;QAClF,MAAM,CAAC;IACT,CAAC;IAEI,mBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,uBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IA1FA;QADC,OAAO,EAAE;;;;qDAGT;IAQD;QADC,OAAO,EAAE;;;;qDAGT;IAeD;QAHC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;kDAGD;IAYD;QADC,OAAO,EAAE;;;;0DAGT;IAQD;QADC,OAAO,EAAE;;;;sDAGT;IA4BD;QALC,OAAO,CAAC;YACP,UAAU,EAAE,IAAI;YAChB,YAAY,EAAE,CAAC;YACf,UAAU,EAAE,CAAC,CAAC,oEAAoE;SACnF,CAAC;;;wCACqF,UAAU;wCAEhG;IA7FU,QAAQ;QARpB,MAAM,CAAC;YACN,UAAU,EAAE,UAAU;YACtB,MAAM,EAAE,0BAA0B;YAClC,SAAS,EAAE,UAAU;YACrB,IAAI,EAAE,uDAAuD;YAC7D,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;OAEW,QAAQ,CAqGpB;IAAD,eAAC;CArGD,AAqGC,CArG6B,iBAAiB,GAqG9C;SArGY,QAAQ","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nnamespace Http {\r\n  export const enum Verb {\r\n    GET, HEAD, POST, PUT, DELETE, TRACE, OPTIONS, CONNECT, PATCH\r\n  }\r\n\r\n  export interface Response {\r\n    statusCode: number;\r\n    body?: string;\r\n  }\r\n\r\n  export interface Requester {\r\n    request(verb: Verb, url: string, callback: Callback<Response>): void;\r\n    request(verb: Verb, url: string, requestBody: string, callback: Callback<Response>): void;\r\n  }\r\n}\r\n\r\n/**\r\n * Defines a package. All fields are non-nullable, except when retrieving the currently running package on the first run of the app,\r\n * in which case only the appVersion is compulsory.\r\n *\r\n * !! THIS TYPE IS READ FROM NATIVE CODE AS WELL. ANY CHANGES TO THIS INTERFACE NEEDS TO BE UPDATED IN NATIVE CODE !!\r\n */\r\nexport interface IPackage {\r\n  deploymentKey: string;\r\n  description: string;\r\n  label: string;\r\n  appVersion: string;\r\n  isMandatory: boolean;\r\n  packageHash: string;\r\n  packageSize: number;\r\n  failedInstall: boolean;\r\n}\r\n\r\n/**\r\n * Defines a remote package, which represents an update package available for download.\r\n */\r\nexport interface IRemotePackage extends IPackage {\r\n  /**\r\n   * The URL at which the package is available for download.\r\n   */\r\n  downloadUrl: string;\r\n\r\n  /**\r\n   * Downloads the package update from the CodePush service.\r\n   *\r\n   * @param downloadSuccess Called with one parameter, the downloaded package information, once the download completed successfully.\r\n   * @param downloadError Optional callback invoked in case of an error.\r\n   * @param downloadProgress Optional callback invoked during the download process. It is called several times with one DownloadProgress parameter.\r\n   */\r\n  download(downloadSuccess: SuccessCallback<ILocalPackage>, downloadError?: ErrorCallback, downloadProgress?: SuccessCallback<DownloadProgress>): void;\r\n\r\n  /**\r\n   * Aborts the current download session, previously started with download().\r\n   *\r\n   * @param abortSuccess Optional callback invoked if the abort operation succeeded.\r\n   * @param abortError Optional callback invoked in case of an error.\r\n   */\r\n  abortDownload(abortSuccess?: SuccessCallback<void>, abortError?: ErrorCallback): void;\r\n}\r\n\r\n/**\r\n * Defines a local package.\r\n *\r\n * !! THIS TYPE IS READ FROM NATIVE CODE AS WELL. ANY CHANGES TO THIS INTERFACE NEEDS TO BE UPDATED IN NATIVE CODE !!\r\n */\r\nexport interface ILocalPackage extends IPackage {\r\n  /**\r\n   * The local storage path where this package is located.\r\n   */\r\n  localPath: string;\r\n\r\n  /**\r\n   * Indicates if the current application run is the first one after the package was applied.\r\n   */\r\n  isFirstRun: boolean;\r\n\r\n  /**\r\n   * Applies this package to the application. The application will be reloaded with this package and on every application launch this package will be loaded.\r\n   * On the first run after the update, the application will wait for a codePush.notifyApplicationReady() call. Once this call is made, the install operation is considered a success.\r\n   * Otherwise, the install operation will be marked as failed, and the application is reverted to its previous version on the next run.\r\n   *\r\n   * @param installSuccess Callback invoked if the install operation succeeded.\r\n   * @param installError Optional callback inovoked in case of an error.\r\n   * @param installOptions Optional parameter used for customizing the installation behavior.\r\n   */\r\n  install(installSuccess: SuccessCallback<InstallMode>, errorCallback?: ErrorCallback, installOptions?: InstallOptions): void;\r\n}\r\n\r\n/**\r\n * Decomposed static side of RemotePackage.\r\n * For Class Decomposition guidelines see http://www.typescriptlang.org/Handbook#writing-dts-files-guidelines-and-specifics\r\n */\r\n/* tslint:disable */\r\ninterface RemotePackage_Static {\r\n  new (): IRemotePackage;\r\n}\r\n/* tslint:enable */\r\n\r\n/**\r\n * Decomposed static side of LocalPackage.\r\n * For Class Decomposition guidelines see http://www.typescriptlang.org/Handbook#writing-dts-files-guidelines-and-specifics\r\n */\r\n/* tslint:disable */\r\ninterface LocalPackage_Static {\r\n  new (): ILocalPackage;\r\n}\r\n/* tslint:enable */\r\n\r\ndeclare const RemotePackage: RemotePackage_Static;\r\ndeclare const LocalPackage: LocalPackage_Static;\r\n\r\n/**\r\n * Defines the JSON format of the current package information file.\r\n * This file is stored in the local storage of the device and persists between store updates and code-push updates.\r\n *\r\n * !! THIS FILE IS READ FROM NATIVE CODE AS WELL. ANY CHANGES TO THIS INTERFACE NEEDS TO BE UPDATED IN NATIVE CODE !!\r\n */\r\ninterface IPackageInfoMetadata extends ILocalPackage {\r\n  nativeBuildTime: string;\r\n}\r\n\r\ninterface NativeUpdateNotification {\r\n  updateAppVersion: boolean;   // Always true\r\n  appVersion: string;\r\n}\r\n\r\nexport interface Callback<T> { (error: Error, parameter: T): void; }\r\nexport interface SuccessCallback<T> { (result?: T): void; }\r\nexport interface ErrorCallback { (error?: Error): void; }\r\n\r\ninterface Configuration {\r\n  appVersion: string;\r\n  clientUniqueId: string;\r\n  deploymentKey: string;\r\n  serverUrl: string;\r\n  ignoreAppVersion?: boolean;\r\n}\r\n\r\ndeclare class AcquisitionStatus {\r\n  static DeploymentSucceeded: string;\r\n  static DeploymentFailed: string;\r\n}\r\n\r\ndeclare class AcquisitionManager {\r\n  constructor(httpRequester: Http.Requester, configuration: Configuration);\r\n  public queryUpdateWithCurrentPackage(currentPackage: IPackage, callback?: Callback<IRemotePackage | NativeUpdateNotification>): void;\r\n  public reportStatusDeploy(pkg?: IPackage, status?: string, previousLabelOrAppVersion?: string, previousDeploymentKey?: string, callback?: Callback<void>): void;\r\n  public reportStatusDownload(pkg: IPackage, callback?: Callback<void>): void;\r\n}\r\n\r\ninterface CodePushCordovaPlugin {\r\n\r\n  /**\r\n   * Get the current package information.\r\n   *\r\n   * @param packageSuccess Callback invoked with the currently deployed package information.\r\n   * @param packageError Optional callback invoked in case of an error.\r\n   */\r\n  getCurrentPackage(packageSuccess: SuccessCallback<ILocalPackage>, packageError?: ErrorCallback): void;\r\n\r\n  /**\r\n   * Gets the pending package information, if any. A pending package is one that has been installed but the application still runs the old code.\r\n   * This happends only after a package has been installed using ON_NEXT_RESTART or ON_NEXT_RESUME mode, but the application was not restarted/resumed yet.\r\n   */\r\n  getPendingPackage(packageSuccess: SuccessCallback<ILocalPackage>, packageError?: ErrorCallback): void;\r\n\r\n  /**\r\n   * Checks with the CodePush server if an update package is available for download.\r\n   *\r\n   * @param querySuccess Callback invoked in case of a successful response from the server.\r\n   *                     The callback takes one RemotePackage parameter. A non-null package is a valid update.\r\n   *                     A null package means the application is up to date for the current native application version.\r\n   * @param queryError Optional callback invoked in case of an error.\r\n   * @param deploymentKey Optional deployment key that overrides the config.xml setting.\r\n   */\r\n  checkForUpdate(querySuccess: SuccessCallback<IRemotePackage>, queryError?: ErrorCallback, deploymentKey?: string): void;\r\n\r\n  /**\r\n   * Notifies the plugin that the update operation succeeded and that the application is ready.\r\n   * Calling this function is required on the first run after an update. On every subsequent application run, calling this function is a noop.\r\n   * If using sync API, calling this function is not required since sync calls it internally.\r\n   *\r\n   * @param notifySucceeded Optional callback invoked if the plugin was successfully notified.\r\n   * @param notifyFailed Optional callback invoked in case of an error during notifying the plugin.\r\n   */\r\n  notifyApplicationReady(notifySucceeded?: SuccessCallback<void>, notifyFailed?: ErrorCallback): void;\r\n\r\n  /**\r\n   * Reloads the application. If there is a pending update package installed using ON_NEXT_RESTART or ON_NEXT_RESUME modes, the update\r\n   * will be immediately visible to the user. Otherwise, calling this function will simply reload the current version of the application.\r\n   */\r\n  restartApplication(installSuccess: SuccessCallback<void>, errorCallback?: ErrorCallback): void;\r\n\r\n  /**\r\n   * Convenience method for installing updates in one method call.\r\n   * This method is provided for simplicity, and its behavior can be replicated by using window.codePush.checkForUpdate(), RemotePackage's download() and LocalPackage's install() methods.\r\n   *\r\n   * The algorithm of this method is the following:\r\n   * - Checks for an update on the CodePush server.\r\n   * - If an update is available\r\n   *         - If the update is mandatory and the alertMessage is set in options, the user will be informed that the application will be updated to the latest version.\r\n   *           The update package will then be downloaded and applied.\r\n   *         - If the update is not mandatory and the confirmMessage is set in options, the user will be asked if they want to update to the latest version.\r\n   *           If they decline, the syncCallback will be invoked with SyncStatus.UPDATE_IGNORED.\r\n   *         - Otherwise, the update package will be downloaded and applied with no user interaction.\r\n   * - If no update is available on the server, or if a previously rolled back update is available and the ignoreFailedUpdates is set to true, the syncCallback will be invoked with the SyncStatus.UP_TO_DATE.\r\n   * - If an error occurs during checking for update, downloading or installing it, the syncCallback will be invoked with the SyncStatus.ERROR.\r\n   *\r\n   * @param syncCallback Optional callback to be called with the status of the sync operation.\r\n   *                     The callback will be called only once, and the possible statuses are defined by the SyncStatus enum.\r\n   * @param syncOptions Optional SyncOptions parameter configuring the behavior of the sync operation.\r\n   * @param downloadProgress Optional callback invoked during the download process. It is called several times with one DownloadProgress parameter.\r\n   *\r\n   */\r\n  sync(syncCallback?: SuccessCallback<SyncStatus>, syncOptions?: SyncOptions, downloadProgress?: SuccessCallback<DownloadProgress>): void;\r\n}\r\n\r\n/**\r\n * Defines the possible result statuses of the window.codePush.sync operation.\r\n */\r\nexport enum SyncStatus {\r\n  /**\r\n   * The application is up to date.\r\n   */\r\n  UP_TO_DATE,\r\n\r\n  /**\r\n   * An update is available, it has been downloaded, unzipped and copied to the deployment folder.\r\n   * After the completion of the callback invoked with SyncStatus.UPDATE_INSTALLED, the application will be reloaded with the updated code and resources.\r\n   */\r\n  UPDATE_INSTALLED,\r\n\r\n  /**\r\n   * An optional update is available, but the user declined to install it. The update was not downloaded.\r\n   */\r\n  UPDATE_IGNORED,\r\n\r\n  /**\r\n   * An error happened during the sync operation. This might be an error while communicating with the server, downloading or unziping the update.\r\n   * The console logs should contain more information about what happened. No update has been applied in this case.\r\n   */\r\n  ERROR,\r\n\r\n  /**\r\n   * There is an ongoing sync in progress, so this attempt to sync has been aborted.\r\n   */\r\n  IN_PROGRESS,\r\n\r\n  /**\r\n   * Intermediate status - the plugin is about to check for updates.\r\n   */\r\n  CHECKING_FOR_UPDATE,\r\n\r\n  /**\r\n   * Intermediate status - a user dialog is about to be displayed. This status will be reported only if user interaction is enabled.\r\n   */\r\n  AWAITING_USER_ACTION,\r\n\r\n  /**\r\n   * Intermediate status - the update package is about to be downloaded.\r\n   */\r\n  DOWNLOADING_PACKAGE,\r\n\r\n  /**\r\n   * Intermediate status - the update package is about to be installed.\r\n   */\r\n  INSTALLING_UPDATE\r\n}\r\n\r\n/**\r\n * Defines the available install modes for updates.\r\n */\r\nexport enum InstallMode {\r\n  /**\r\n   * The update will be applied to the running application immediately. The application will be reloaded with the new content immediately.\r\n   */\r\n  IMMEDIATE,\r\n\r\n  /**\r\n   * The update is downloaded but not installed immediately. The new content will be available the next time the application is started.\r\n   */\r\n  ON_NEXT_RESTART,\r\n\r\n  /**\r\n   * The udpate is downloaded but not installed immediately. The new content will be available the next time the application is resumed or restarted, whichever event happends first.\r\n   */\r\n  ON_NEXT_RESUME\r\n}\r\n\r\n/**\r\n * Defines the install operation options.\r\n */\r\nexport interface InstallOptions {\r\n  /**\r\n   * Used to specify the InstallMode used for the install operation. This is optional and defaults to InstallMode.ON_NEXT_RESTART.\r\n   */\r\n  installMode?: InstallMode;\r\n\r\n  /**\r\n   * If installMode === ON_NEXT_RESUME, the minimum amount of time (in seconds) which needs to pass with the app in the background before an update install occurs when the app is resumed.\r\n   */\r\n  minimumBackgroundDuration?: number;\r\n\r\n  /**\r\n   * Used to specify the InstallMode used for the install operation if the update is mandatory. This is optional and defaults to InstallMode.IMMEDIATE.\r\n   */\r\n  mandatoryInstallMode?: InstallMode;\r\n}\r\n\r\n/**\r\n * Defines the sync operation options.\r\n */\r\nexport interface SyncOptions extends InstallOptions {\r\n  /**\r\n   * Optional boolean flag. If set, previous updates which were rolled back will be ignored. Defaults to true.\r\n   */\r\n  ignoreFailedUpdates?: boolean;\r\n\r\n  /**\r\n   * Used to enable, disable or customize the user interaction during sync.\r\n   * If set to false, user interaction will be disabled. If set to true, the user will be alerted or asked to confirm new updates, based on whether the update is mandatory.\r\n   * To customize the user dialog, this option can be set to a custom UpdateDialogOptions instance.\r\n   */\r\n  updateDialog?: boolean | UpdateDialogOptions;\r\n\r\n  /**\r\n   * Overrides the config.xml deployment key when checking for updates.\r\n   */\r\n  deploymentKey?: string;\r\n}\r\n\r\n/**\r\n * Defines the configuration options for the alert or confirmation dialog\r\n */\r\nexport interface UpdateDialogOptions {\r\n  /**\r\n   * If a mandatory update is available and this option is set, the message will be displayed to the user in an alert dialog before downloading and installing the update.\r\n   * The user will not be able to cancel the operation, since the update is mandatory.\r\n   */\r\n  mandatoryUpdateMessage?: string;\r\n\r\n  /**\r\n   * If an optional update is available and this option is set, the message will be displayed to the user in a confirmation dialog.\r\n   * If the user confirms the update, it will be downloaded and installed. Otherwise, the update update is not downloaded.\r\n   */\r\n  optionalUpdateMessage?: string;\r\n\r\n  /**\r\n   * The title of the dialog box used for interacting with the user in case of a mandatory or optional update.\r\n   * This title will only be used if at least one of mandatoryUpdateMessage or optionalUpdateMessage options are set.\r\n   */\r\n  updateTitle?: string;\r\n\r\n  /**\r\n   * The label of the confirmation button in case of an optional update.\r\n   */\r\n  optionalInstallButtonLabel?: string;\r\n\r\n  /**\r\n   * The label of the cancel button in case of an optional update.\r\n   */\r\n  optionalIgnoreButtonLabel?: string;\r\n\r\n  /**\r\n   * The label of the continue button in case of a mandatory update.\r\n   */\r\n  mandatoryContinueButtonLabel?: string;\r\n\r\n  /**\r\n   * Flag indicating if the update description provided by the CodePush server should be displayed in the dialog box appended to the update message.\r\n   */\r\n  appendReleaseDescription?: boolean;\r\n\r\n  /**\r\n   * Optional prefix to add to the release description.\r\n   */\r\n  descriptionPrefix?: string;\r\n}\r\n\r\n/**\r\n * Defines the JSON format of the package diff manifest file.\r\n */\r\ninterface IDiffManifest {\r\n  deletedFiles: string[];\r\n}\r\n\r\n/**\r\n * Defines the format of the DownloadProgress object, used to send periodical update notifications on the progress of the update download.\r\n */\r\nexport interface DownloadProgress {\r\n  totalBytes: number;\r\n  receivedBytes: number;\r\n}\r\n\r\n/**\r\n * @name Code Push\r\n * @description\r\n * CodePush plugin for Cordova by Microsoft that supports iOS and Android.\r\n *\r\n * For more info, please see https://github.com/ksachdeva/ionic2-code-push-example\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { CodePush } from '@ionic-native/code-push';\r\n *\r\n * constructor(private codePush: CodePush) { }\r\n *\r\n * ...\r\n *\r\n * // note - mostly error & completed methods of observable will not fire\r\n * // as syncStatus will contain the current state of the update\r\n * this.codePush.sync().subscribe((syncStatus) => console.log(syncStatus));\r\n *\r\n * const downloadProgress = (progress) => { console.log(`Downloaded ${progress.receivedBytes} of ${progress.totalBytes}`); }\r\n * this.codePush.sync({}, downloadProgress).subscribe((syncStatus) => console.log(syncStatus));\r\n *\r\n * ```\r\n */\r\n@Plugin({\r\n  pluginName: 'CodePush',\r\n  plugin: 'cordova-plugin-code-push',\r\n  pluginRef: 'codePush',\r\n  repo: 'https://github.com/Microsoft/cordova-plugin-code-push',\r\n  platforms: ['Android', 'iOS']\r\n})\r\n\r\nexport class CodePush extends IonicNativePlugin {\r\n\r\n  /**\r\n   * Get the current package information.\r\n   *\r\n   * @param packageSuccess Callback invoked with the currently deployed package information.\r\n   * @param packageError Optional callback invoked in case of an error.\r\n   * @returns {Promise<ILocalPackage>}\r\n   */\r\n  @Cordova()\r\n  getCurrentPackage(): Promise<ILocalPackage> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Gets the pending package information, if any. A pending package is one that has been installed but the application still runs the old code.\r\n   * This happends only after a package has been installed using ON_NEXT_RESTART or ON_NEXT_RESUME mode, but the application was not restarted/resumed yet.\r\n   * @returns {Promise<ILocalPackage>}\r\n   */\r\n  @Cordova()\r\n  getPendingPackage(): Promise<ILocalPackage> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Checks with the CodePush server if an update package is available for download.\r\n   *\r\n   * @param querySuccess Callback invoked in case of a successful response from the server.\r\n   *                     The callback takes one RemotePackage parameter. A non-null package is a valid update.\r\n   *                     A null package means the application is up to date for the current native application version.\r\n   * @param queryError Optional callback invoked in case of an error.\r\n   * @param deploymentKey Optional deployment key that overrides the config.xml setting.\r\n   * @returns {Promise<IRemotePackage>}\r\n   */\r\n  @Cordova({\r\n    callbackOrder: 'reverse'\r\n  })\r\n  checkForUpdate(deploymentKey?: string): Promise<IRemotePackage> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Notifies the plugin that the update operation succeeded and that the application is ready.\r\n   * Calling this function is required on the first run after an update. On every subsequent application run, calling this function is a noop.\r\n   * If using sync API, calling this function is not required since sync calls it internally.\r\n   *\r\n   * @param notifySucceeded Optional callback invoked if the plugin was successfully notified.\r\n   * @param notifyFailed Optional callback invoked in case of an error during notifying the plugin.\r\n   * @returns {Promise<void>}\r\n   */\r\n  @Cordova()\r\n  notifyApplicationReady(): Promise<void> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Reloads the application. If there is a pending update package installed using ON_NEXT_RESTART or ON_NEXT_RESUME modes, the update\r\n   * will be immediately visible to the user. Otherwise, calling this function will simply reload the current version of the application.\r\n   * @returns {Promise<void>}\r\n   */\r\n  @Cordova()\r\n  restartApplication(): Promise<void> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Convenience method for installing updates in one method call.\r\n   * This method is provided for simplicity, and its behavior can be replicated by using window.codePush.checkForUpdate(), RemotePackage's download() and LocalPackage's install() methods.\r\n   *\r\n   * The algorithm of this method is the following:\r\n   * - Checks for an update on the CodePush server.\r\n   * - If an update is available\r\n   *         - If the update is mandatory and the alertMessage is set in options, the user will be informed that the application will be updated to the latest version.\r\n   *           The update package will then be downloaded and applied.\r\n   *         - If the update is not mandatory and the confirmMessage is set in options, the user will be asked if they want to update to the latest version.\r\n   *           If they decline, the syncCallback will be invoked with SyncStatus.UPDATE_IGNORED.\r\n   *         - Otherwise, the update package will be downloaded and applied with no user interaction.\r\n   * - If no update is available on the server, or if a previously rolled back update is available and the ignoreFailedUpdates is set to true, the syncCallback will be invoked with the SyncStatus.UP_TO_DATE.\r\n   * - If an error occurs during checking for update, downloading or installing it, the syncCallback will be invoked with the SyncStatus.ERROR.\r\n   *\r\n   * @param syncCallback Optional callback to be called with the status of the sync operation.\r\n   * @param syncOptions Optional SyncOptions parameter configuring the behavior of the sync operation.\r\n   * @param downloadProgress Optional callback invoked during the download process. It is called several times with one DownloadProgress parameter.\r\n   * @returns {Observable<SyncStatus>}\r\n   *\r\n   */\r\n  @Cordova({\r\n    observable: true,\r\n    successIndex: 0,\r\n    errorIndex: 3 // we don't need this, so we set it to a value higher than # of args\r\n  })\r\n  sync(syncOptions?: SyncOptions, downloadProgress?: SuccessCallback<DownloadProgress>): Observable<SyncStatus> {\r\n    return;\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}