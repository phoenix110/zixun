{"version":3,"sources":["../../../src/@ionic-native/plugins/qqsdk/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,MAAA,EAAQ,OAAA,EAAS,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AACxE,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAmD3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqGG;AAWH;IAA2B,yBAAiB;IAV5C;QAAA,qEAgHC;QApGC;;WAEG;QACH,WAAK,GAAG;YACN,EAAE,EAAE,CAAC;YACL,MAAM,EAAE,CAAC;YACT,QAAQ,EAAE,CAAC;SACZ,CAAC;QACF;;WAEG;QACH,gBAAU,GAAG;YACX,EAAE,EAAE,CAAC;YACL,GAAG,EAAE,CAAC;SACP,CAAC;;IAsFJ,CAAC;IApFC;;;;OAIG;IAIH,wBAAQ,GAAR,UAAS,OAAuB;QAC9B,MAAM,CAAC;IACT,CAAC;IAKD,sBAAM,GAAN;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAIH,oCAAoB,GAApB,UAAqB,OAAuB;QAC1C,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAIH,yBAAS,GAAT,UAAU,OAAuB;QAC/B,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAIH,0BAAU,GAAV,UAAW,OAAuB;QAChC,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAIH,yBAAS,GAAT,UAAU,OAAuB;QAC/B,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAIH,0BAAU,GAAV,UAAW,OAAuB;QAChC,MAAM,CAAC;IACT,CAAC;IACI,gBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,oBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IA3EA;QAHC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;yCAGD;IAKD;QAHC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;uCAGD;IAUD;QAHC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;qDAGD;IAUD;QAHC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;0CAGD;IAUD;QAHC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;2CAGD;IAUD;QAHC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;0CAGD;IAUD;QAHC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;2CAGD;IA/FU,KAAK;QAVjB,MAAM,CAAC;YACN,UAAU,EAAE,OAAO;YACnB,MAAM,EAAE,sBAAsB;YAC9B,SAAS,EAAE,OAAO;YAClB,IAAI,EAAE,uCAAuC;YAC7C,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;YAC7B,OAAO,EAAE,kFAAkF;YAC3F,gBAAgB,EAAE,CAAC,WAAW,CAAC;SAChC,CAAC;OAEW,KAAK,CAsGjB;IAAD,YAAC;CAtGD,AAsGC,CAtG0B,iBAAiB,GAsG3C;SAtGY,KAAK","file":"index.js","sourceRoot":"","sourcesContent":["import { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\r\nimport { Injectable } from '@angular/core';\r\n\r\nexport interface QQShareOptions {\r\n\r\n  /**\r\n   * The clinet type, QQ or TIM\r\n   * Default is QQ\r\n   */\r\n  client?: number;\r\n\r\n  /**\r\n   * The Share Sence\r\n   * Default is QQ\r\n   */\r\n  scene?: number;\r\n\r\n  /**\r\n   * The text for shareText\r\n   */\r\n  text?: string;\r\n\r\n  /**\r\n   * The url for share news or audio\r\n   */\r\n  url?: string;\r\n\r\n  /**\r\n   * The title for share image,news or audio\r\n   */\r\n  title?: string;\r\n\r\n  /**\r\n   * The description for share image,news or audio\r\n   */\r\n  description?: string;\r\n\r\n  /**\r\n   * The image for share image,news or audio\r\n   * Image supports three types:\r\n   * 1. Network URL\r\n   * 2. Base64\r\n   * 3. Absolute file path\r\n   */\r\n  image?: string;\r\n\r\n  /**\r\n   *  The URL for audio\r\n   */\r\n  flashUrl?: string;\r\n}\r\n\r\n/**\r\n * @name QQSDK\r\n * @description\r\n * This Plugin is a wrapper around the Tencent QQ SDK for Android and iOS. Provides access to QQ ssoLogin, QQ Sharing, QQZone Sharing etc.\r\n *\r\n * Requires Cordova plugin: `cordova-plugin-qqsdk`. For more info, please see the [QQSDK plugin docs](https://github.com/iVanPan/Cordova_QQ).\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { QQSDK, QQShareOptions } from '@ionic-native/qqsdk';\r\n *\r\n * constructor(private qq: QQSDK) { }\r\n *\r\n * ...\r\n *\r\n *\r\n * const options: QQShareOptions = {\r\n *   client: this.qq.ClientType.QQ,\r\n *   scene: this.qq.Scene.QQ,\r\n *   title: 'This is a title for cordova-plugin-qqsdk',\r\n *   url: 'https://cordova.apache.org/',\r\n *   image: 'https://cordova.apache.org/static/img/cordova_bot.png',\r\n *   description: 'This is  Cordova QQ share description',\r\n *   flashUrl:  'http://stream20.qqmusic.qq.com/30577158.mp3',\r\n * };\r\n *\r\n * const clientOptions: QQShareOptions = {\r\n *   client: this.qq.ClientType.QQ,\r\n * };\r\n *\r\n * const shareTextOptions: QQShareOptions = {\r\n *   client: this.qq.ClientType.QQ,\r\n *   text: 'This is Share Text',\r\n *   scene: this.qq.Scene.QQ,\r\n * };\r\n *\r\n * this.qq.ssoLogin(clientOptions)\r\n *    .then(result => {\r\n *       // Success\r\n *       console.log('token is ' + result.access_token);\r\n *       console.log('userid is ' + result.userid);\r\n *       console.log('expires_time is ' + new Date(parseInt(result.expires_time)) + ' TimeStamp is ' + result.expires_time);\r\n *    })\r\n *    .catch(error => {\r\n *       console.log(error); // Failed\r\n *    });\r\n *\r\n * this.qq.logout()\r\n *    .then(() => {\r\n *       console.log('logout success');\r\n *    })\r\n *    .catch(error => {\r\n *       console.log(error);\r\n *    });\r\n *\r\n * this.qq.checkClientInstalled(clientOptions)\r\n *    .then(() => {\r\n *       console.log('Installed');\r\n *    })\r\n *    .catch(() => {\r\n *       console.log('Not Installed');\r\n *    });\r\n *\r\n * this.qq.shareText(shareTextOptions)\r\n *    .then(() => {\r\n *       console.log('shareText success');\r\n *    })\r\n *    .catch(error => {\r\n *       console.log(error);\r\n *    });\r\n *\r\n * this.qq.shareImage(options)\r\n *    .then(() => {\r\n *       console.log('shareImage success');\r\n *    })\r\n *    .catch(error => {\r\n *       console.log(error);\r\n *    });\r\n * }\r\n *\r\n * this.qq.shareNews(options)\r\n *    .then(() => {\r\n *       console.log('shareNews success');\r\n *    })\r\n *    .catch(error => {\r\n *       console.log(error);\r\n *    });\r\n * }\r\n *\r\n * this.qq.shareAudio(options)\r\n *    .then(() => {\r\n *       console.log('shareAudio success');\r\n *    })\r\n *    .catch(error => {\r\n *       console.log(error);\r\n *    });\r\n *\r\n * ```\r\n *\r\n * @interfaces\r\n * QQShareOptions\r\n */\r\n@Plugin({\r\n  pluginName: 'QQSDK',\r\n  plugin: 'cordova-plugin-qqsdk',\r\n  pluginRef: 'QQSDK',\r\n  repo: 'https://github.com/iVanPan/Cordova_QQ',\r\n  platforms: ['Android', 'iOS'],\r\n  install: 'ionic cordova plugin add cordova-plugin-qqsdk --variable QQ_APP_ID=YOUR_QQ_APPID',\r\n  installVariables: ['QQ_APP_ID'],\r\n})\r\n\r\nexport class QQSDK extends IonicNativePlugin {\r\n\r\n  /**\r\n   * QQ Share Scene\r\n   */\r\n  Scene = {\r\n    QQ: 0,\r\n    QQZone: 1,\r\n    Favorite: 2\r\n  };\r\n  /**\r\n   *  client type:  QQ application or TIM application\r\n   */\r\n  ClientType = {\r\n    QQ: 0,\r\n    TIM: 1\r\n  };\r\n\r\n  /**\r\n   * open QQ or TIM client perform ssoLogin\r\n   * @param options\r\n   * @returns {Promise<any>} Returns a Promise that resolves with the success return, or rejects with an error.\r\n   */\r\n  @Cordova({\r\n    callbackOrder: 'reverse'\r\n  })\r\n  ssoLogin(options: QQShareOptions): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  @Cordova({\r\n    callbackOrder: 'reverse'\r\n  })\r\n  logout(): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Detect if the QQ application or TIM application is installed on the device.\r\n   *\r\n   * @returns {Promise<any>} Returns a Promise that resolves with the success return, or rejects with an error.\r\n   */\r\n  @Cordova({\r\n    callbackOrder: 'reverse'\r\n  })\r\n  checkClientInstalled(options: QQShareOptions): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * shareText\r\n   * @param options\r\n   * @returns {Promise<any>} Returns a Promise that resolves with the success return, or rejects with an error.\r\n   */\r\n  @Cordova({\r\n    callbackOrder: 'reverse'\r\n  })\r\n  shareText(options: QQShareOptions): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * shareImage\r\n   * @param options\r\n   * @returns {Promise<any>} Returns a Promise that resolves with the success return, or rejects with an error.\r\n   */\r\n  @Cordova({\r\n    callbackOrder: 'reverse'\r\n  })\r\n  shareImage(options: QQShareOptions): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * shareNews\r\n   * @param options\r\n   * @returns {Promise<any>} Returns a Promise that resolves with the success return, or rejects with an error.\r\n   */\r\n  @Cordova({\r\n    callbackOrder: 'reverse'\r\n  })\r\n  shareNews(options: QQShareOptions): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * shareAudio\r\n   * @param options\r\n   * @returns {Promise<any>} Returns a Promise that resolves with the success return, or rejects with an error.\r\n   */\r\n  @Cordova({\r\n    callbackOrder: 'reverse'\r\n  })\r\n  shareAudio(options: QQShareOptions): Promise<any> {\r\n    return;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}